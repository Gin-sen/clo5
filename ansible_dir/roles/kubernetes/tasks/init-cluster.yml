---

- name: Reset kubernetes cluster
  ansible.builtin.shell: kubeadm reset -f
  ignore_errors: true

- name: Check cluster status
  ansible.builtin.shell: kubectl get nodes
  ignore_errors: true
  register: cluster_exist

- set_fact:
    kubernetes_init: "{% if kubernetes_init_host is defined and  kubernetes_init_host == inventory_hostname %}yes{% else %}no{% endif %}"

# - set_fact:
#     kubernetes_ip_address: "{{ ansible.utils.ipaddr() }}"

- set_fact:
    kubernetes_ip_address: "{{ inventory_hostname }}"

- set_fact:
    kubernetes_image_repository: "registry.k8s.io"

# - name: Debug 
#   ansible.builtin.debug:
#     msg: 
#       - inventory_hostname = {{ inventory_hostname }}
#       - cluster_exist = {{ cluster_exist }}
#       - kubernetes_init = {{ kubernetes_init }}
#       - kubernetes_ip_address = {{ kubernetes_ip_address }}
#       - kubernetes_image_repository = {{ kubernetes_image_repository }}
#       - ansible_facts.interfaces {{ ansible_facts.interfaces }}

- block:
    - set_fact:
        kubernetes_iface: "{{ item }}"
      when: item == "ens3"
      with_items: "{{ ansible_facts.interfaces }}"
    
    - set_fact:
        apiserver_sans: "{{ (sans_base + [kubernetes_ip_address] ) | unique }}"

    # - name: render kubeadm-init.yml
    #   ansible.builtin.template:
    #     src: kubeadm-init.yml.j2
    #     dest: /root/kubeadm-init.yml

    - set_fact:
        kubeadm_extra_args: --cri-socket="{{ cri_socket_path }}"


    # - name: Init kubernetes cluster
    #   ansible.builtin.shell: kubeadm init -v=5 --config /root/kubeadm-init.yml {{ kubeadm_extra_args }} > /root/kubeinit.log
    - name: Init kubernetes cluster
      ansible.builtin.shell: "kubeadm init --apiserver-advertise-address={{ kubernetes_ip_address }} --control-plane-endpoint={{ kubernetes_ip_address }}  --upload-certs  --kubernetes-version={{ kubernetes_version }} > /root/kubeinit.log"
      # ansible.builtin.shell: kubeadm init -v=5 --apiserver-advertise-address="{{ kubernetes_ip_address }}" --apiserver-cert-extra-sans="{{ remote_ip_hostname }}" --apiserver-cert-extra-sans="{{ kubernetes_ip_address }}"  --node-name="{{ remote_ip_hostname }}" --pod-network-cidr="{{ kubernetes_pod_subnet }}" {{ kubeadm_extra_args }} > /root/kubeinit.log
      register: cluster_init_cmd
    
    - name: Create ~/.kube directory
      ansible.builtin.file: 
        name: "{{ item }}"
        state: directory
      loop:
        - "/home/{{ ansible_ssh_user }}/.kube"
        - "/root/.kube"


    # - name: Make sure /etc/kubernetes/admin.conf has host
    #   ansible.builtin.replace:
    #     path: "{{ item }}"
    #     regexp: '(\s+)server: https://172\.16\.228\.15:6443(\s+.*)?$'
    #     replace: '\1server: https://{{ remote_ip_hostname }}:6443\2'
    #   loop:
    #     - /etc/kubernetes/admin.conf
    #     - /etc/kubernetes/kubelet.conf
    #     - /etc/kubernetes/scheduler.conf
    #     - /etc/kubernetes/controller-manager.conf

    # - name: Make sure /etc/kubernetes/admin.conf has host
    #   ansible.builtin.replace:
    #     path: "{{ item }}"
    #     regexp: '(\s+)https://172\.16\.228\.15:(\d+)(\s+.*)?$'
    #     replace: '\1https://{{ remote_ip_hostname }}:\2\3'
    #   loop:
    #     - /etc/kubernetes/admin.conf
    #     - /etc/kubernetes/kubelet.conf
    #     - /etc/kubernetes/scheduler.conf
    #     - /etc/kubernetes/controller-manager.conf

    - name: Copy .kube/config file
      ansible.builtin.copy: 
        src: /etc/kubernetes/admin.conf
        dest: "{{ item }}"
        remote_src: yes
        mode: '0664'
      loop:
        - "/home/{{ ansible_ssh_user }}/.kube/config"
        - "/root/.kube/config"
        
    # - name: restart containerd kubelet
    #   ansible.builtin.systemd:
    #     name: '{{ item }}'
    #     state: restarted
    #   loop:
    #     - containerd
    #     - kubelet

    - name: Wait for Kubernetes pods to start
      ansible.builtin.pause:
        prompt: "Make sure kube-system pods are running before taint (kubectl get pods -n kube-system)"
        seconds: 5

    - name: Remove Taint
      shell: kubectl taint nodes --all node-role.kubernetes.io/control-plane-

    - name: Wait for Kubernetes pods to start
      ansible.builtin.pause:
        prompt: "Make sure kube-system pods are running before Calico install (kubectl get pods -n kube-system)"
        seconds: 5

    # - include_tasks: 
    #     file: cni-install.yml

    - name: Get the token for joining the worker nodes
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    - debug:
        msg: "{{ kubernetes_join_command.stdout }}"

    - name: Copy join command to local file.
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="./kubernetes_join_command.sh" mode=0777
      become: false

  when: 
    - kubernetes_init
    - cluster_exist.rc == 1
  ignore_errors: "{{ ansible_check_mode }}"