---

- name: Check cluster status
  ansible.builtin.shell: kubectl get nodes
  ignore_errors: true
  register: cluster_exist

- set_fact:
    kubernetes_init: "{% if kubernetes_init_host is defined and  kubernetes_init_host == inventory_hostname %}yes{% else %}no{% endif %}"

- set_fact:
    kubernetes_ip_address: "{{ inventory_hostname }}"

- set_fact:
    kubernetes_image_repository: "registry.k8s.io"

- block:
    - set_fact:
        kubernetes_iface: "{{ item }}"
      when: item == "ens3"
      with_items: "{{ ansible_facts.interfaces }}"
    
    - set_fact:
        apiserver_sans: "{{ (sans_base + [kubernetes_ip_address] ) | unique }}"

    - set_fact:
        kubeadm_extra_args: --cri-socket="{{ cri_socket_path }}"

    - name: Init kubernetes cluster
      ansible.builtin.shell: "kubeadm init --pod-network-cidr={{ kubernetes_pod_subnet }} --apiserver-advertise-address={{ kubernetes_ip_address }} --control-plane-endpoint={{ kubernetes_ip_address }}  --upload-certs  --kubernetes-version={{ kubernetes_version }} > /root/kubeinit.log"
      register: cluster_init_cmd
    
    - name: Create ~/.kube directory
      ansible.builtin.file: 
        name: "{{ item }}"
        state: directory
      loop:
        - "/home/{{ ansible_ssh_user }}/.kube"
        - "/root/.kube"

    - name: Copy .kube/config file
      ansible.builtin.copy: 
        src: /etc/kubernetes/admin.conf
        dest: "{{ item.path }}"
        remote_src: yes
        mode: '0644'
        owner: "{{ item.name }}"
      loop:
        - { name: "{{ ansible_ssh_user }}", path: "/home/{{ ansible_ssh_user }}/.kube/config" }
        - { name: root, path: "/root/.kube/config" }

    - name: Cat kube config file.
      shell: cat /etc/kubernetes/admin.conf
      register: kubeconfig_file

    - name: Copy kube config to local file.
      local_action: copy content="{{ kubeconfig_file.stdout_lines|join('\n') }}" dest="./kubeconfig.yaml" mode=0777
      become: false

    - name: Get the token for joining the worker nodes
      shell: kubeadm token create  --print-join-command
      register: kubernetes_join_command

    - debug:
        msg: "{{ kubernetes_join_command.stdout }}"

    - name: Copy join command to local file.
      local_action: copy content="{{ kubernetes_join_command.stdout_lines[0] }}" dest="./kubernetes_join_command.sh" mode=0777
      become: false

  when: 
    - kubernetes_init
    - cluster_exist.rc == 1
  ignore_errors: "{{ ansible_check_mode }}"
