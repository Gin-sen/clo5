version: '3.8'

services:

  adminer:
    image: adminer:latest
    ports:
      - "8080:8080"
    networks:
      - k8s-cluster
    depends_on:
      # - booking.db
      - hotel.db

  hotel.db:
    image: postgres:13-alpine
    restart: always
    environment:
      - POSTGRES_USER=Bobby
      - POSTGRES_PASSWORD=BR
      - POSTGRES_DB=hotel-db
    networks:
      - k8s-cluster
    volumes:
      - db-data-hotel:/var/lib/postgresql/data
    ports:
      - "5444:5432"

  hotel.api:
    image: hotel-api
    restart: on-failure
    build:
      dockerfile: Dockerfile
      context: hotel
      target: final
    environment:
      - RABBIT_HOST=rabbitmq
      - RABBIT_PORT=5672
      - RABBIT_USER=user
      - RABBIT_PASS=password
      - RABBIT_VHOST=my_vhost
      - DB_HOST=hotel.db
      - DB_PORT=5432
      - DB_USER=Bobby
      - DB_PASS=BR
      - DB_NAME=hotel-db
      - INFLUX_URL=http://influxdb:8086
      - INFLUX_ORGANIZATION=myorg
      - INFLUX_TOKEN=mytoken
      - INFLUX_BUCKET=hotel-api-dev
    networks:
      - k8s-cluster
    volumes:
      - ./hotel:/code/hotel
    ports:
      - "8002:80"
    depends_on:
      - hotel.db
      - influxdb

  # hotel.api-test:
  #   image: hotel-api-test
  #   restart: "no"
  #   build:
  #     dockerfile: Dockerfile
  #     context: hotel
  #     target: test
  #   environment:
  #     - DB_HOST=hotel.db
  #     - DB_PORT=5432
  #     - DB_USER=Bobby
  #     - DB_PASS=BR
  #     - DB_NAME=hotel-db
  #   volumes:
  #     - ./hotel:/code/hotel
  #   depends_on:
  #     - hotel.db

  # booking.db:
  #   image: postgres:13-alpine
  #   restart: always
  #   environment:
  #     - POSTGRES_USER=Bobby
  #     - POSTGRES_PASSWORD=BR
  #     - POSTGRES_DB=booking-db
  #   volumes:
  #     - db-data-hotel:/var/lib/postgresql/data
  #   ports:
  #     - "5445:5432"

  # booking.api:
  #   image: booking-api
  #   restart: on-failure
  #   build:
  #     dockerfile: Dockerfile
  #     context: booking
  #     target: final
  #   environment:
  #     - DB_HOST=booking.db
  #     - DB_PORT=5432
  #     - DB_USER=Bobby
  #     - DB_PASS=BR
  #     - DB_NAME=booking-db
    # networks:
    #   - k8s-cluster
  #   volumes:
  #     - ./hotel:/code/booking
  #   ports:
  #     - "8003:80"
  #   depends_on:
  #     - booking.db

  # booking.api-test:
  #   image: booking-api-test
  #   restart: "no"
  #   build:
  #     dockerfile: Dockerfile
  #     context: booking
  #     target: test
  #   environment:
  #     - DB_HOST=booking.db
  #     - DB_PORT=5432
  #     - DB_USER=Bobby
  #     - DB_PASS=BR
  #     - DB_NAME=booking-db
    # networks:
    #   - k8s-cluster
  #   volumes:
  #     - ./booking:/code/booking
  #   depends_on:
  #     - booking.db

  influxdb:
    image: influxdb:2.6-alpine
    networks:
      - k8s-cluster
    env_file:
      - influxv2.env
    volumes:
      # Mount for influxdb data directory and configuration
      - influxdbv2:/var/lib/influxdb2:rw
    ports:
      - "8086:8086"
      
  telegraf:
    image: telegraf:1.25-alpine
    networks:
      - k8s-cluster
    depends_on:
      - influxdb
    volumes:
      # Mount for telegraf config
      - ./tools/telegraf/telegraf.conf:/etc/telegraf/telegraf.conf:ro
    env_file:
      - influxv2.env

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: tools/setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./tools/setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./tools/setup/lib.sh:/lib.sh:ro,Z
      - ./tools/setup/roles:/roles:ro,Z
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - k8s-cluster
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: tools/elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./tools/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - k8s-cluster
    restart: unless-stopped

  logstash:
    build:
      context: tools/logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./tools/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./tools/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - k8s-cluster
    depends_on:
      - elasticsearch
      - rabbitmq
    restart: unless-stopped

  kibana:
    build:
      context: tools/kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./tools/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - k8s-cluster
    depends_on:
      - elasticsearch
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
        - 5672:5672
        - 15672:15672
    environment:
      RABBITMQ_DEFAULT_USER: user
      RABBITMQ_DEFAULT_PASS: password
      RABBITMQ_DEFAULT_VHOST: my_vhost
    networks:
      - k8s-cluster

networks:
  k8s-cluster:
    driver: bridge

volumes:
  elasticsearch:
  setup:
  influxdbv2:
  db-data-hotel:
  # db-data-booking:
